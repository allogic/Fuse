%define parse.assert
%define parse.error verbose

%start PROGRAM

%locations

%code requires
{
#include "enton/prologue.inl"
}

%union
{
	core_string_t string;
	int64_t number;
}

%token VERSION
%token CORE
%token EXTENSION
%token STRUCT
%token QUALIFIER
%token LAYOUT
%token LOCATION
%token BINDING
%token IN
%token UNIFORM

%token HASH
%token COMMA
%token COLON
%token SEMICOLON
%token LPAREN RPAREN
%token LBRACE RBRACE
%token EQ

%token INT
%token VEC3
%token IVEC3
%token MAT4

%token IDENT STRING
%token NUMBER

%type <string> IDENT STRING
%type <number> NUMBER

%%
PROGRAM
	: PROGRAM STRUCT_DECL {  }
	| PROGRAM PRE_PROCESSOR_DECL {  }
	| PROGRAM LAYOUT_DECL {  }
	| %empty
	;

PRE_PROCESSOR_DECL
	: VERSION_DECL
	| EXTENSION_DECL
	;

VERSION_DECL
	: HASH VERSION NUMBER
	| HASH VERSION NUMBER CORE
	;

EXTENSION_DECL
	: HASH EXTENSION IDENT COLON QUALIFIER
	;

LAYOUT_DECL
	: LAYOUT LPAREN LAYOUT_MODS RPAREN IN TYPE IDENT SEMICOLON
	| LAYOUT LPAREN LAYOUT_MODS RPAREN UNIFORM TYPE_DECL LBRACE UNIFORM_MODS RBRACE IDENT SEMICOLON
	| LAYOUT LPAREN LAYOUT_MODS RPAREN UNIFORM TYPE_DECL LBRACE UNIFORM_MODS RBRACE SEMICOLON
	;

LAYOUT_MODS
	: LAYOUT_ASSIGN COMMA LAYOUT_MODS
	| LAYOUT_ASSIGN
	| %empty
	;

UNIFORM_MODS
	: TYPE IDENT SEMICOLON UNIFORM_MODS
	| TYPE IDENT SEMICOLON
	;

LAYOUT_ASSIGN
	: LAYOUT_LOCATION_ASSIGN
	| LAYOUT_BINDING_ASSIGN
	;

LAYOUT_LOCATION_ASSIGN
	: LOCATION EQ NUMBER
	;

LAYOUT_BINDING_ASSIGN
	: BINDING EQ NUMBER
	;

STRUCT_DECL
	: STRUCT IDENT LPAREN RPAREN SEMICOLON
	;

TYPE_DECL
	: IDENT
	;

TYPE
	: INT
	| VEC3
	| IVEC3
	| MAT4
	;
%%

#include "enton/epilogue.inl"
